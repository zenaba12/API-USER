security:
  password_hashers:
    App\Entity\User:
      algorithm: auto

  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/ # Exclure certaines URL de la sécurité
      security: false

    json_login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/login # URL à laquelle l'authentification est demandée
        username_path: email # L'email est utilisé pour l'authentification
        password_path: password # Le mot de passe est envoyé avec la requête
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~ # Utilisation automatique du gestionnaire JWT pour l'authentification

    logout:
      pattern: ^/api/logout
      stateless: true

  access_control:
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api, roles: ROLE_USER }

monolog:
  channels: ["security"]
  handlers:
    security:
      type: stream
      path: "%kernel.logs_dir%/security.log"
      level: DEBUG # Remplace "deb" par "DEBUG" (ou tout autre niveau valide)

